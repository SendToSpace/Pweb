	AREA GAMESETTING, CODE,READWRITE
	extern hex_to_int
	extern en_move_right	
	extern en_move_left	
	extern en_move_down
	extern Initial_board
	extern en_amount
	extern current_position
	extern player_setup	
	extern rng
	extern left_pos
	extern right_pos
	extern how_many_down_move_left
	extern player1		
	extern left_topmost	
	extern left2_topmost
	extern left3_topmost
	extern left4_topmost
	extern left5_topmost
	extern left6_topmost
	extern left7_topmost	
	extern left_most_colum	
	extern output_string
	extern div_and_mod
	extern led_score	
	EXPORT level
	EXPORT lives
	EXPORT score
	EXPORT enemy_move
	EXPORT movement_direction_control; these two control the enemy pathing
	EXPORT next_move;
	EXPORT game_instruction
	EXPORT game_feature	
	EXPORT press_s_to_start
	EXPORT check_level_clear
	EXPORT print_scores	
game_instruction = "The OBjective of this game is to kill all enemy before 2 minuts each level speed of enemy increase. Use space to shoot and a,d to move",0x2D,0xA,0x00
game_feature = "warning, please don't shoot the right top most enemy before kill the enemy on its bottom, the mother will be sad!!, and you shall not pass",0x2D,0xA,0x00
press_s_to_start = "Press s to start",0x00
	
		ALIGN
		
new_board =\
0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4F,0x4F,0x4F,0x4F,0x4F,0x4F,0x4F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x57,0x57,0x57,0x57,0x57,0x57,0x57,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x57,0x57,0x57,0x57,0x57,0x57,0x57,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x53,0x53,0x53,0x20,0x20,0x20,0x53,0x53,0x53,0x20,0x20,0x20,0x53,0x53,0x53,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x73,0x20,0x73,0x20,0x20,0x20,0x73,0x20,0x73,0x20,0x20,0x20,0x73,0x20,0x73,0x20,0x20,0x20,0x7C,0x0D,\
0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D,\
0x00			
		ALIGN
		
level = 0x0D,0x0A,"Level 1",0x00
		ALIGN
lives = 0x04
		ALIGN
score = 0x0000,0x00
		ALIGN
displayscore = "scores 0000",0x00
		ALIGN
movement_direction_control = 1,2,3,2,0x00 ;2 is down |1 is right| 3 is left
		ALIGN
next_move = 0
		ALIGN
			
enemy_initial_move = 1		
		ALIGN
new_led_score = "0000",0x00;			
		ALIGN	
	;#####set the pathing for enemy
enemy_move	
	STMFD SP!,{LR,r4-r6}
	;move rng
	ldr r5,= enemy_initial_move
	ldr r6,[r5]
	cmp r6,#1
	beq initial_move
	
	;check next move
	ldr r5,=movement_direction_control
	ldr r4,= next_move
	ldrb r4,[r4]
	ldrb r6,[r5,r4];
	
	;check if r6 is 0x00
	cmp r6,#0x00
	;when the cycle reach to end
	ldreq r4,= next_move
	strbeq r6,[r4]
	moveq r4,#0; reset the cycle
	
	ldrbeq r6,[r5,r4];reset the value
	
	cmp r6,#2
	beq mv_down
	cmp r6,#1
	beq mv_right
	bl en_move_left
	b mv_done
mv_down		
	bl en_move_down
	b mv_done
mv_right	
	bl en_move_right
mv_done	
	LDMFD SP!,{LR,r4-r6}
	BX lr
	
initial_move	
	;######testing rng#######
	mov r0,#3
	bl rng;
	cmp r0,#2
	bleq en_move_left
	cmp r0,#1
	bleq en_move_right
	mov r6,#0
	strb r6,[r5];
	LDMFD SP!,{LR,r4-r6}
	BX lr
;#####set the pathing for enemy		


;######check if level cler
check_level_clear
	STMFD SP!,{LR,r4-r8,r0}
  	ldr r4,=en_amount
	ldrb r5,[r4]
	cmp r5,#0;
	beq new_level
	b skip_level_clear
;reprint the board
new_level
	ldr r6 ,=Initial_board
	ldr r7,=new_board
board_loop
	ldrb r8,[r7],#1
	strb r8,[r6],#1
	cmp r8,#0x00
	bne board_loop
	beq new_level_done
;reprint the board

new_level_done

	;reset counter for timer1
	;LDR r4, =0xE0008004
	;ldr r5,[r4]
	;orr r5,#2
	;str r5,[r4]
	;ldr r5,[r4]
	;BIC r5,#2
	;strb r5,[r4]
;reset counter for timer1
;reset enemy amount
	ldr r4,=en_amount
	mov r5,#0x23
	strb r5,[r4]
;reset player poition
	ldr r4,=current_position
	ldr r5,[r4]
	ldr r6,=player1
	mov r7,#0x20
	strb r7,[r6,r5]
	;get rid of old player
	mov r5,#0x0B
	strb r5,[r4]
	bl player_setup
;increment level	
	ldr r4,=level
	ldrb r0,[r4,#8]
	bl hex_to_int
	add r0,#49;
	strb r0,[r4,#8];
;reset left right position of enemy	
	ldr r4,=left_pos
	mov r5,#0x003B  
	strh r5,[r4]
	ldr r4,=right_pos
	mov r5,#0x0041
	strh r5,[r4]
;reset enemy down	
	ldr r4,=how_many_down_move_left
	mov r5,#0x05
	strb r5,[r4]
;reset enemy initial move random move
	ldr r4,=enemy_initial_move
	mov r5,#1
	strb r5,[r4]
;reset 7enemys position	
	ldr r4,=left_topmost
	ldr r5,=0x003B
	strh r5,[r4]
	ldr r4,=left2_topmost
	ldr r5,=0x003C
	strh r5,[r4]
	ldr r4,=left3_topmost
	ldr r5,=0x003D
	strh r5,[r4]
	ldr r4,=left4_topmost
	ldr r5,=0x003E
	strh r5,[r4]
	ldr r4,=left5_topmost
	ldr r5,=0x003F
	strh r5,[r4]
	ldr r4,=left6_topmost
	ldr r5,=0x0040
	strh r5,[r4]
	ldr r4,=left7_topmost
	ldr r5,=0x0041
	strh r5,[r4]
;reset leftmostcolum for update enemy status
	ldr r4,=left_most_colum
	mov r5,#7
	strb r5,[r4]
;add 50pt for next level
	ldr r4,=score
	ldr r5,[r4]
	add r5,#50
;new led score
	ldr r4,=new_led_score
	ldr r5,=led_score
ls	ldrb r3,[r4],#1
	cmp r3,0x00
	beq skip_level_clear
	strb r3,[r5],#1
	b ls



	LDMFD SP!,{LR,r4-r8,r0}
	BX lr	


skip_level_clear	
	LDMFD SP!,{LR,r4-r8,r0}
	BX lr	
	
	
;#########PRINT SCORE ON SCREEN
print_scores
	STMFD SP!,{lr,r1,r4,r5}
	ldr r5,=score
	ldr r1,[r5]
  	mov r0,#10
	ldr r4,=displayscore
div	bl div_and_mod
	add r1,#48
	strb r1,[r4,#11]
	cmp r0,#0
	mov r1,r0
	mov r0,#10
	sub r4,#1
	bne div
	ldr r2,=displayscore
 	ldrb r3,[r2]
	bl output_string
	
	LDMFD SP!,{LR,r1,R4,R5}
	BX lr
	
	
		END