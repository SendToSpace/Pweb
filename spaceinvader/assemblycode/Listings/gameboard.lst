


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             gameboard, CODE, READWRITE
    2 00000000                 extern           read_character
    3 00000000                 extern           output_character
    4 00000000                 extern           read_string
    5 00000000                 extern           output_string
    6 00000000                 extern           spawn_player
    7 00000000                 extern           move_right
    8 00000000                 extern           move_left
    9 00000000                 extern           en_move_right
   10 00000000                 extern           en_move_left
   11 00000000                 extern           en_move_down
   12 00000000                 extern           player_setup
   13 00000000                 extern           shoot
   14 00000000                 extern           bullet_up
   15 00000000                 extern           enemy_move
   16 00000000                 extern           level
   17 00000000                 extern           game_instruction
   18 00000000                 extern           game_feature
   19 00000000                 extern           press_s_to_start
   20 00000000                 extern           check_level_clear
   21 00000000                 EXPORT           board
   22 00000000                 EXPORT           FIQ_Handler
   23 00000000                 EXPORT           Initial_board
   24 00000000                 EXPORT           led_score
   25 00000000                 extern           rng
   26 00000000                 extern           print_scores
   27 00000000                 extern           en_shot
   28 00000000                 extern           RPG_WHITE
   29 00000000                 extern           RPG_PURPLE
   30 00000000                 extern           RPG_RED
   31 00000000                 extern           RPG_GREEN
   32 00000000                 extern           Display_life
   33 00000000                 extern           lives
   34 00000000                 extern           Display_score
   35 00000000                 extern           atoi
   36 00000000                 extern           itoa
   37 00000000                 extern           MOTHERLEFT
   38 00000000                 extern           MOTHERRIGHT
   39 00000000                 extern           mothermoving
   40 00000000 47 61 6D 
              65 20 4F 
              76 65 72 
              2C 20 50 
              72 65 73 
              73 20 51 
              20 74 6F 
              20 45 78 
              69 74 2C 
              20 61 6E 
              64 20 50 
              72 65 73 
              73 20 4C 
              4F 41 44 
              20 74 6F 
              20 72 65 
              73 74 61 
              72 74 00 Timmer  =                "Game Over, Press Q to Exit, an
d Press LOAD to restart",0x00
   41 00000036 0D 0A 2D 



ARM Macro Assembler    Page 2 


              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 00    boarder =                0x0D,0X0a,0x2D,0x2D,0x2D,0x2D,0
x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,
0x2D,0x2D,0x2D,0x00
   42 00000050         ;clear = 0x1B,0x5B,0x32,0x4A,0x00
   43 00000050                 ALIGN
   44 00000050 0C 00   clear   =                0x0C,0x00
   61 00000052 2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              0D 0A 7C 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              7C 0D 0A 
              7C 20 20 
              20 20 20 
              20 20 4F 
              4F 4F 4F 
              4F 4F 4F 
              20 20 20 
              20 20 20 
              20 7C 0D 
              0A 7C 20 
              20 20 20 
              20 20 20 
              4D 4D 4D 
              4D 4D 4D 
              4D 20 20 
              20 20 20 
              20 20 7C 
              0D 0A 7C 
              20 20 20 
              20 20 20 
              20 4D 4D 
              4D 4D 4D 
              4D 4D 20 
              20 20 20 
              20 20 20 
              7C 0D 0A 
              7C 20 20 
              20 20 20 
              20 20 57 
              57 57 57 



ARM Macro Assembler    Page 3 


              57 57 57 
              20 20 20 
              20 20 20 
              20 7C 0D 
              0A 7C 20 
              20 20 20 
              20 20 20 
              57 57 57 
              57 57 57 
              57 20 20 
              20 20 20 
              20 20 7C 
              0D 0A 7C 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              7C 0D 0A 
              7C 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 7C 0D 
              0A 7C 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 7C 
              0D 0A 7C 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              7C 0D 0A 
              7C 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 7C 0D 
              0A 7C 20 
              20 20 53 
              53 53 20 
              20 20 53 
              53 53 20 



ARM Macro Assembler    Page 4 


              20 20 53 
              53 53 20 
              20 20 7C 
              0D 0A 7C 
              20 20 20 
              73 20 73 
              20 20 20 
              73 20 73 
              20 20 20 
              73 20 73 
              20 20 20 
              7C 0D 0A 
              7C 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 7C 0D 
              00       Initial_board
                               =                0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0
x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,
0x2D,0x2D,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x
20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20
,0x20,0x20,0x20,0x20,0x20,0x20,0x4F,0x4F,0x4F,0x4F,0x4F,0x4F,0x4F,0x20,0x20,0x2
0,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D
, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4D,0x4D,0x4D,0x4D,0x4D,0x4D,0
x4D,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x2
0,0x20,0x20,0x20,0x57,0x57,0x57,0x57,0x57,0x57,0x57,0x20,0x20,0x20,0x20,0x20,0x
20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x57,0x57,0x57
,0x57,0x57,0x57,0x57,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0
x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x
20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0
x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2
0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,
0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0
x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7
C,0x20,0x20,0x20,0x53,0x53,0x53,0x20,0x20,0x20,0x53,0x53,0x53,0x20,0x20,0x20,0x
53,0x53,0x53,0x20,0x20,0x20,0x7C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x73,0x20,0x73
,0x20,0x20,0x20,0x73,0x20,0x73,0x20,0x20,0x20,0x73,0x20,0x73,0x20,0x20,0x20,0x7
C,0x0D, 0x0A,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x0D, 0x00
   62 000001CA         
   63 000001CA         ;keep track of timmer0 cycle
   64 000001CA 00      timer0_cycle_count
                               =                0x00
   65 000001CB 00              ALIGN
   66 000001CC         ;Every 2 cycle from the timmer0, this change to a 1
   67 000001CC 00      move_enable
                               =                0x00        ;
   68 000001CD 00 00 00        ALIGN
   69 000001D0         
   70 000001D0 30 30 30 
              30 00    led_score
                               =                "0000",0x00 ;



ARM Macro Assembler    Page 5 


   71 000001D5 00 00 00        ALIGN
   72 000001D8 00      led_digt
                               =                0
   73 000001D9 00 00 00        ALIGN
   74 000001DC 00      selet_digt
                               =                0
   75 000001DD 00 00 00        ALIGN
   76 000001E0         board
   77 000001E0         ;set Life to 4
   78 000001E0         
   79 000001E0 E3A00004        mov              r0,#4
   80 000001E4 EBFFFFFE        bl               Display_life
   81 000001E8         ;
   82 000001E8         ;set rpg to white
   83 000001E8         
   84 000001E8 EBFFFFFE        BL               RPG_WHITE
   85 000001EC         
   86 000001EC         ;set rpg to white
   87 000001EC         
   88 000001EC E59F2334        ldr              r2,=game_instruction
   89 000001F0 EBFFFFFE        bl               output_string
   90 000001F4 E59F2330        ldr              r2,=game_feature
   91 000001F8 EBFFFFFE        bl               output_string
   92 000001FC E59F232C        ldr              r2,=press_s_to_start
   93 00000200 EBFFFFFE        bl               output_string
   94 00000204 EBFFFFFE        bl               read_character
   95 00000208 E3500073        cmp              r0,#0x73
   96 0000020C 1AFFFFFE        bne              board
   97 00000210 EBFFFFFE        bl               player_setup ;
   98 00000214         
   99 00000214 EB000000        bl               interrupt_init
  100 00000218         
  101 00000218         testloop
  102 00000218         
  103 00000218         
  104 00000218 EAFFFFFE        b                testloop
  105 0000021C         
  106 0000021C         interrupt_init
  107 0000021C E92D4003        STMFD            SP!, {r0-r1, lr} 
                                                            ; Save registers 
  108 00000220         
  109 00000220         ; Push button setup   
  110 00000220 E59F030C        LDR              r0, =0xE002C000
  111 00000224 E5901000        LDR              r1, [r0]
  112 00000228 E3811202        ORR              r1, r1, #0x20000000
  113 0000022C E3C11201        BIC              r1, r1, #0x10000000
  114 00000230 E5801000        STR              r1, [r0]    ; PINSEL0 bits 29:2
                                                            8 = 10
  115 00000234         
  116 00000234         
  117 00000234         ; UART0 setup
  118 00000234 E59F02FC        LDR              r0, =0xE000C004 ; U0IER
  119 00000238 E5901000        LDR              r1, [r0]
  120 0000023C E3811001        ORR              r1, r1, #1  ; Enable Receive Da
                                                            ta Available Interr
                                                            upt(RDA) Bit 0
  121 00000240 E5801000        STR              r1, [r0]
  122 00000244         
  123 00000244         ; Classify sources as IRQ or FIQ



ARM Macro Assembler    Page 6 


  124 00000244 E59F02F0        LDR              r0, =0xFFFFF000
  125 00000248 E590100C        LDR              r1, [r0, #0xC]
  126 0000024C E3811902        ORR              r1, r1, #0x8000 ; External Inte
                                                            rrupt 1
  127 00000250 E580100C        STR              r1, [r0, #0xC]
  128 00000254 E3811040        ORR              r1, r1, #0x40 ; UART0 Interrupt
                                                            
  129 00000258 E3811030        ORR              r1, r1, #0x30 ; TIMER 0 and 1
  130 0000025C E580100C        STR              r1, [r0, #0xC]
  131 00000260         
  132 00000260         ; Enable Interrupts
  133 00000260 E59F02D4        LDR              r0, =0xFFFFF000
  134 00000264 E5901010        LDR              r1, [r0, #0x10]
  135 00000268 E3811902        ORR              r1, r1, #0x8000 ; External Inte
                                                            rrupt 1
  136 0000026C E5801010        STR              r1, [r0, #0x10]
  137 00000270 E3811040        ORR              r1, r1, #0x40 ; UART0 Interrupt
                                                            
  138 00000274 E3811030        ORR              r1, r1, #0x30 ; TIMER 0 and 1
  139 00000278 E5801010        STR              r1, [r0, #0x10]
  140 0000027C         
  141 0000027C E59F42BC        LDR              r4, =0xE0004014 ; T0MCR - Timer
                                                            0MatchControlRegist
                                                            er
  142 00000280 E5945000        LDR              r5, [r4]
  143 00000284 E3855018        ORR              r5, r5, #0x18 ; Interrupt and R
                                                            eset for MR1 and MR
                                                            0
  144 00000288 E5845000        STR              r5, [r4]
  145 0000028C         
  146 0000028C E59F42B0        LDR              r4, =0xE0008014 ; T1MCR - Timer
                                                            0MatchControlRegist
                                                            er
  147 00000290 E5945000        LDR              r5, [r4]
  148 00000294 E3855028        ORR              r5, r5, #0x28 ; Interrupt and s
                                                            top for MR1
  149 00000298 E5845000        STR              r5, [r4]
  150 0000029C         
  151 0000029C         ; Set match register
  152 0000029C E59F42A4        LDR              r4, =0xE000401C 
                                                            ; Match Register 1
  153 000002A0 E3A0580F        LDR              r5, =0x000F0000 ; Set time to m
                                                            atch time ;0x002, 0
                                                            x000F
  154 000002A4 E5845000        STR              r5, [r4]
  155 000002A8         
  156 000002A8         ; Set match register
  157 000002A8 E59F429C        LDR              r4, =0xE000801C ; Match Registe
                                                            r 1 for timmer 1
  158 000002AC E3A05471        LDR              r5, =0x71000000 ; Set time to m
                                                            atch time:0x2100000
                                                            0 ;0x41000000;71
  159 000002B0 E5845000        STR              r5, [r4]
  160 000002B4         
  161 000002B4         ; Enable Timer0
  162 000002B4 E59F4294        LDR              r4, =0xE0004004 ; T0TCR - Timer
                                                            0ControlRegister
  163 000002B8 E5945000        LDR              r5, [r4]
  164 000002BC E3855001        ORR              r5, r5, #1



ARM Macro Assembler    Page 7 


  165 000002C0 E5845000        STR              r5, [r4]
  166 000002C4         
  167 000002C4         ; Enable Timer1
  168 000002C4 E59F4288        LDR              r4, =0xE0008004 ; T1TCR - Timer
                                                            0ControlRegister
  169 000002C8 E5945000        LDR              r5, [r4]
  170 000002CC E3855001        ORR              r5, r5, #1
  171 000002D0 E5845000        STR              r5, [r4]
  172 000002D4         
  173 000002D4         ; External Interrupt 1 setup for edge sensitive
  174 000002D4 E59F027C        LDR              r0, =0xE01FC148
  175 000002D8 E5901000        LDR              r1, [r0]
  176 000002DC E3811002        ORR              r1, r1, #2  ; EINT1 = Edge Sens
                                                            itive
  177 000002E0 E5801000        STR              r1, [r0]
  178 000002E4         
  179 000002E4         ; Enable FIQ's, Disable IRQ's
  180 000002E4 E10F0000        MRS              r0, CPSR
  181 000002E8 E3C00040        BIC              r0, r0, #0x40
  182 000002EC E3800080        ORR              r0, r0, #0x80
  183 000002F0 E121F000        MSR              CPSR_c, r0
  184 000002F4         
  185 000002F4 E8BD4003        LDMFD            SP!, {r0-r1, lr} 
                                                            ; Restore registers
                                                            
  186 000002F8 E12FFF1E        BX               lr          ; Return
  187 000002FC         
  188 000002FC         
  189 000002FC         
  190 000002FC         
  191 000002FC         
  192 000002FC         FIQ_Handler
  193 000002FC E92D5FF7        STMFD            SP!, {r0-r2,r4-r12, lr} 
                                                            ; Save registers 
  194 00000300         ;cathing TIMER 1
  195 00000300 E59F0254        LDR              r0, =0xE0008000
  196 00000304 E5901000        LDR              r1, [r0]
  197 00000308 E3510002        cmp              r1, #0x00000002
  198 0000030C 0A00003E        BEQ              T1
  199 00000310         
  200 00000310         Timer0Int                            ; Check for Timer 0
                                                             Interrupt
  201 00000310 E59F0248        LDR              r0, =0xE0004000 ; T0InterruptRe
                                                            gister
  202 00000314 E5901000        LDR              r1, [r0]
  203 00000318 E3110002        TST              r1, #2      ;  1 if pending int
                                                            errupt due to Match
                                                             Register 1
  204 0000031C 0A000049        BEQ              UART0
  205 00000320         
  206 00000320         
  207 00000320         
  208 00000320         
  209 00000320 E59F223C        ldr              r2,=mothermoving
  210 00000324 E5D23000        ldrb             r3,[r2]
  211 00000328 E3530001        cmp              r3,#1
  212 0000032C 0BFFFFFE        bleq             MOTHERLEFT
  213 00000330 E3530000        CMP              R3,#0
  214 00000334 0BFFFFFE        BLEQ             MOTHERRIGHT



ARM Macro Assembler    Page 8 


  215 00000338         
  216 00000338         
  217 00000338         
  218 00000338         ;STROBING THE SCORE
  219 00000338 E59F2228        ldr              r2,=led_score
  220 0000033C E59F3228        ldr              r3,=led_digt
  221 00000340 E5D34000        ldrb             r4,[r3]     ;r4 contain digit o
                                                            f score
  222 00000344 E7D25004        ldrb             r5,[r2,r4]  ; r5 contain the sc
                                                            ore values
  223 00000348 E3550000        cmp              r5,#0x00
  224 0000034C 12455030        subne            r5,#48
  225 00000350 03A04000        moveq            r4,#0x00
  226 00000354 07D25004        ldrbeq           r5,[r2,r4]  ;load first digt of
                                                             score
  227 00000358 02455030        subeq            r5,#48
  228 0000035C         ;update digit
  229 0000035C E3540004        cmp              r4,#0x04
  230 00000360 12844001        addne            r4,#1
  231 00000364 03A04000        moveq            r4,0x00
  232 00000368 E5C34000        strb             r4,[r3]     ;update digit
  233 0000036C         
  234 0000036C E1A01005        mov              r1,r5
  235 00000370         
  236 00000370 E59F21F8        LDR              R2,=selet_digt
  237 00000374 E5923000        ldr              r3,[r2]
  238 00000378 E1A00003        mov              r0,r3
  239 0000037C E2833001        add              r3,#1
  240 00000380 E3530004        cmp              r3,#4
  241 00000384 03A03000        moveq            r3,#0
  242 00000388 E5C23000        strb             r3,[r2]
  243 0000038C EBFFFFFE        bl               Display_score
  244 00000390         ;STROBING THE SCORE
  245 00000390         
  246 00000390         ;check level clear
  247 00000390 EBFFFFFE        bl               check_level_clear
  248 00000394         ;@@@@@@@@@@@@printing the player and board,and level@@@@
                       @@@@@@@@@@@@ 
  249 00000394         
  250 00000394         
  251 00000394 E59F21D8        ldr              r2,=clear   ;
  252 00000398 EBFFFFFE        bl               output_string
  253 0000039C         ;ldr r2,=boarder;
  254 0000039C         ;bl output_string;
  255 0000039C E59F21D4        ldr              r2,= Initial_board ;
  256 000003A0 EBFFFFFE        bl               output_string ;
  257 000003A4 EBFFFFFE        bl               spawn_player ;
  258 000003A8 E59F21CC        ldr              r2,=boarder ;
  259 000003AC EBFFFFFE        bl               output_string ;
  260 000003B0 E59F21C8        ldr              r2,=level
  261 000003B4 EBFFFFFE        bl               output_string
  262 000003B8         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  263 000003B8         
  264 000003B8         
  265 000003B8         
  266 000003B8         ;$$$$$$$$$$$$$flag to enable move$$$$$$$$$$$$$$$$$$$$$$ 
                       
  267 000003B8         
  268 000003B8 E59F21C4        ldr              r2,= timer0_cycle_count ;



ARM Macro Assembler    Page 9 


  269 000003BC E5D24000        ldrb             r4,[r2]
  270 000003C0 E3540006        cmp              r4,#6       ; set speed of enab
                                                            le move flag:4or2
  271 000003C4 0A00004E        beq              set_move
  272 000003C8 E2844001        add              r4,#1       ;
  273 000003CC E5C24000        strb             r4,[r2]     ;
  274 000003D0         ;$$$$$$$$$$flag to enable move$$$$$$$$$$$$$$$$4 
  275 000003D0         
  276 000003D0         ;bullet up;
  277 000003D0 EBFFFFFE        bl               bullet_up
  278 000003D4 EBFFFFFE        bl               en_shot
  279 000003D8 EBFFFFFE        bl               print_scores
  280 000003DC         ;move enemy if the enable flag is set
  281 000003DC         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  282 000003DC         ;skip move if move_enalbe is 0;
  283 000003DC E59F21A4        ldr              r2,= move_enable ; enable is se
                                                            t to 1 every other 
                                                            cycle
  284 000003E0 E5D24000        ldrb             r4,[r2]     ;
  285 000003E4 E3540000        cmp              r4,#0
  286 000003E8 0A000006        beq              skip_move
  287 000003EC E59F2194        ldr              r2,=move_enable
  288 000003F0 E3A04000        mov              r4,#0       ;     ;reset enable
                                                             everytime a move i
                                                            s call
  289 000003F4 E5C24000        strb             r4,[r2]     ;
  290 000003F8 EBFFFFFE        bl               enemy_move
  291 000003FC         
  292 000003FC         
  293 000003FC         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
  294 000003FC         
  295 000003FC         ;display lives
  296 000003FC E59F2188        ldr              r2,=lives
  297 00000400 E5D20000        ldrb             r0,[r2]
  298 00000404 EBFFFFFE        bl               Display_life
  299 00000408         
  300 00000408         ;timmer0 code above
  301 00000408         skip_move
  302 00000408 EA00002E        B                Timer0Int_Exit
  303 0000040C         
  304 0000040C         ;Timer1 game over
  305 0000040C         
  306 0000040C         T1
  307 0000040C         ;display lives
  308 0000040C E59F2178        ldr              r2,=lives
  309 00000410 E5D20000        ldrb             r0,[r2]
  310 00000414 EBFFFFFE        bl               Display_life
  311 00000418 E59F2154        ldr              r2,=clear
  312 0000041C EBFFFFFE        bl               output_string
  313 00000420 E59F2168        ldr              r2,=Timmer
  314 00000424 EBFFFFFE        BL               RPG_PURPLE
  315 00000428 EBFFFFFE        bl               output_string
  316 0000042C         ;disable timer0
  317 0000042C E59F411C        LDR              r4, =0xE0004004 ; T0TCR - Timer
                                                            0ControlRegister
  318 00000430 E3A05000        mov              r5, #0
  319 00000434 E5845000        STR              r5, [r4]
  320 00000438 EBFFFFFE        bl               read_character
  321 0000043C E3500071        cmp              r0, #0x71   ;press q quit



ARM Macro Assembler    Page 10 


  322 00000440 0A000025        beq              Timer1Int_Exit
  323 00000444 EAFFFFF0        b                T1
  324 00000448         
  325 00000448         UART0                                ; Check for UART0 i
                                                            nterrupt
  326 00000448 E59F0144        LDR              r0, =0xE000C008 ; UART0 Interru
                                                            pt Identification R
                                                            egister(U0IIR)
  327 0000044C E5901000        LDR              r1, [r0]
  328 00000450 E3110001        TST              r1, #1      ; Bit 0 / 0 = pendi
                                                            ng, 1 = no pending 
                                                            interrupts
  329 00000454 1A000009        BNE              EINT1
  330 00000458         
  331 00000458 E92D5FF7        STMFD            SP!,  {r0-r2,r4-r12, lr}
  332 0000045C         ;Uart0 interrupt code below
  333 0000045C EBFFFFFE        bl               read_character ; character stor
                                                            e in r0
  334 00000460         
  335 00000460         
  336 00000460         shooting
  337 00000460 E3500020        cmp              r0 ,#0x20
  338 00000464 0BFFFFFE        bleq             shoot
  339 00000468         
  340 00000468         ;$$$$$$$$$$4player move$$$$$$$$$$$$$$$$$$$44 
  341 00000468         player_move
  342 00000468         ;moving left and right
  343 00000468 E3500064        cmp              r0,#0x64    ;   set d to move r
                                                            ight
  344 0000046C 0BFFFFFE        bleq             move_right  ;
  345 00000470 E3500061        cmp              r0,#0x61    ; set a to move lef
                                                            t
  346 00000474 0BFFFFFE        bleq             move_left   ;
  347 00000478         ;$$$$$$$$$$4player move$$$$$$$$$$$$$$$$$$$44 
  348 00000478         
  349 00000478         
  350 00000478         
  351 00000478         ;Uart0 interrupt code above; 
  352 00000478         
  353 00000478 E8BD5FF7        LDMFD            SP!,  {r0-r2,r4-r12, lr}
  354 0000047C EA00001A        B                FIQ_Exit
  355 00000480         
  356 00000480         
  357 00000480         EINT1                                ; Check for EINT1 i
                                                            nterrupt
  358 00000480 E59F0110        LDR              r0, =0xE01FC140
  359 00000484 E5901000        LDR              r1, [r0]
  360 00000488 E3110002        TST              r1, #2
  361 0000048C 0A000016        BEQ              FIQ_Exit
  362 00000490         
  363 00000490 E92D5FF7        STMFD            SP!,  {r0-r2,r4-r12, lr} 
                                                            ; Save registers 
  364 00000494         
  365 00000494         ; Push button EINT1 Handling Code
  366 00000494         
  367 00000494 E59F40B8        LDR              r4, =0xE0008004 ; T0TCR - Timer
                                                            0ControlRegister
  368 00000498 E3A05000        mov              r5, #0
  369 0000049C E5845000        STR              r5, [r4]



ARM Macro Assembler    Page 11 


  370 000004A0         stoploop
  371 000004A0 EBFFFFFE        bl               read_character
  372 000004A4 E3500073        cmp              r0,0x73
  373 000004A8 0A000000        beq              resume
  374 000004AC EAFFFFFB        b                stoploop
  375 000004B0         ; My code
  376 000004B0         
  377 000004B0         
  378 000004B0         resume
  379 000004B0         ; End My code
  380 000004B0 E59F409C        LDR              r4, =0xE0008004 ; T0TCR - Timer
                                                            0ControlRegister
  381 000004B4 E3A05001        mov              r5, #1
  382 000004B8 E5845000        STR              r5, [r4]
  383 000004BC E8BD5FF7        LDMFD            SP!,  {r0-r2,r4-r12, lr} 
                                                            ; Restore registers
                                                            
  384 000004C0         
  385 000004C0 E3811002        ORR              r1, r1, #2  ; Clear Interrupt
  386 000004C4 E5801000        STR              r1, [r0]
  387 000004C8         
  388 000004C8         
  389 000004C8         
  390 000004C8         
  391 000004C8         
  392 000004C8         Timer0Int_Exit
  393 000004C8         
  394 000004C8         
  395 000004C8         
  396 000004C8         ; Clear Interrupt
  397 000004C8 E59F0090        LDR              r0, =0xE0004000 ; get T0Interru
                                                            ptRegister
  398 000004CC E5901000        LDR              r1, [r0]    ; by writing 1 to b
                                                            it 1
  399 000004D0 E3811002        ORR              r1, #2      ; Clear interrupt f
                                                            or MR1
  400 000004D4 E5801000        STR              r1, [r0]    ; by writing to bit
                                                             1
  401 000004D8         
  402 000004D8 0A000003        BEQ              FIQ_Exit
  403 000004DC         
  404 000004DC         Timer1Int_Exit
  405 000004DC E59F0078        LDR              r0, =0xE0008000 ; get T1Interru
                                                            ptRegister
  406 000004E0 E5901000        LDR              r1, [r0]    ; by writing 1 to b
                                                            it 1
  407 000004E4 E3811004        ORR              r1, #4      ; Clear interrupt f
                                                            or MR2
  408 000004E8 E5801000        STR              r1, [r0]
  409 000004EC         
  410 000004EC         
  411 000004EC         
  412 000004EC         
  413 000004EC         FIQ_Exit
  414 000004EC E59F1098        ldr              r1,=lives
  415 000004F0 E5D12000        ldrb             r2,[r1]
  416 000004F4 E3520000        cmp              r2,#0
  417 000004F8 0AFFFFC3        beq              T1
  418 000004FC E8BD5FF7        LDMFD            SP!,  {r0-r2,r4-r12, lr}



ARM Macro Assembler    Page 12 


  419 00000500 E25EF004        SUBS             pc, lr, #4
  420 00000504         
  421 00000504         
  422 00000504         ;set player to move,reset cycles of move
  423 00000504         set_move
  424 00000504 E92D4014        STMFD            SP!, {r2,r4,lr}
  425 00000508 E59F2078        ldr              r2,= move_enable ;
  426 0000050C E3A04001        mov              r4,#0x01    ;
  427 00000510 E5C24000        strb             r4,[r2]     ;
  428 00000514 E59F2068        ldr              r2,= timer0_cycle_count ;
  429 00000518 E3E04000        mov              r4,#-1      ;
  430 0000051C E5C24000        strb             r4,[r2]     ;
  431 00000520 E8BD4014        LDMFD            SP!,  {r2,r4,lr}
  432 00000524 E12FFF1E        BX               lr
  433 00000528                 END
              00000000 
              00000000 
              00000000 
              E002C000 
              E000C004 
              FFFFF000 
              E0004014 
              E0008014 
              E000401C 
              E000801C 
              E0004004 
              E0008004 
              E01FC148 
              E0008000 
              E0004000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000C008 
              E01FC140 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\gameboard.d -o.\objects\gameboard.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_
v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 524" --list=.\listings\gameboard.lst gameboa
rd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EINT1 00000480

Symbol: EINT1
   Definitions
      At line 357 in file gameboard.s
   Uses
      At line 329 in file gameboard.s
Comment: EINT1 used once
FIQ_Exit 000004EC

Symbol: FIQ_Exit
   Definitions
      At line 413 in file gameboard.s
   Uses
      At line 354 in file gameboard.s
      At line 361 in file gameboard.s
      At line 402 in file gameboard.s

FIQ_Handler 000002FC

Symbol: FIQ_Handler
   Definitions
      At line 192 in file gameboard.s
   Uses
      At line 22 in file gameboard.s
Comment: FIQ_Handler used once
Initial_board 00000052

Symbol: Initial_board
   Definitions
      At line 61 in file gameboard.s
   Uses
      At line 23 in file gameboard.s
      At line 255 in file gameboard.s

T1 0000040C

Symbol: T1
   Definitions
      At line 306 in file gameboard.s
   Uses
      At line 198 in file gameboard.s
      At line 323 in file gameboard.s
      At line 417 in file gameboard.s

Timer0Int 00000310

Symbol: Timer0Int
   Definitions
      At line 200 in file gameboard.s
   Uses
      None
Comment: Timer0Int unused
Timer0Int_Exit 000004C8

Symbol: Timer0Int_Exit
   Definitions
      At line 392 in file gameboard.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 302 in file gameboard.s
Comment: Timer0Int_Exit used once
Timer1Int_Exit 000004DC

Symbol: Timer1Int_Exit
   Definitions
      At line 404 in file gameboard.s
   Uses
      At line 322 in file gameboard.s
Comment: Timer1Int_Exit used once
Timmer 00000000

Symbol: Timmer
   Definitions
      At line 40 in file gameboard.s
   Uses
      At line 313 in file gameboard.s
Comment: Timmer used once
UART0 00000448

Symbol: UART0
   Definitions
      At line 325 in file gameboard.s
   Uses
      At line 204 in file gameboard.s
Comment: UART0 used once
board 000001E0

Symbol: board
   Definitions
      At line 76 in file gameboard.s
   Uses
      At line 21 in file gameboard.s
      At line 96 in file gameboard.s

boarder 00000036

Symbol: boarder
   Definitions
      At line 41 in file gameboard.s
   Uses
      At line 258 in file gameboard.s
Comment: boarder used once
clear 00000050

Symbol: clear
   Definitions
      At line 44 in file gameboard.s
   Uses
      At line 251 in file gameboard.s
      At line 311 in file gameboard.s

gameboard 00000000

Symbol: gameboard
   Definitions
      At line 1 in file gameboard.s
   Uses
      None



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: gameboard unused
interrupt_init 0000021C

Symbol: interrupt_init
   Definitions
      At line 106 in file gameboard.s
   Uses
      At line 99 in file gameboard.s
Comment: interrupt_init used once
led_digt 000001D8

Symbol: led_digt
   Definitions
      At line 72 in file gameboard.s
   Uses
      At line 220 in file gameboard.s
Comment: led_digt used once
led_score 000001D0

Symbol: led_score
   Definitions
      At line 70 in file gameboard.s
   Uses
      At line 24 in file gameboard.s
      At line 219 in file gameboard.s

move_enable 000001CC

Symbol: move_enable
   Definitions
      At line 67 in file gameboard.s
   Uses
      At line 283 in file gameboard.s
      At line 287 in file gameboard.s
      At line 425 in file gameboard.s

player_move 00000468

Symbol: player_move
   Definitions
      At line 341 in file gameboard.s
   Uses
      None
Comment: player_move unused
resume 000004B0

Symbol: resume
   Definitions
      At line 378 in file gameboard.s
   Uses
      At line 373 in file gameboard.s
Comment: resume used once
selet_digt 000001DC

Symbol: selet_digt
   Definitions
      At line 74 in file gameboard.s
   Uses
      At line 236 in file gameboard.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: selet_digt used once
set_move 00000504

Symbol: set_move
   Definitions
      At line 423 in file gameboard.s
   Uses
      At line 271 in file gameboard.s
Comment: set_move used once
shooting 00000460

Symbol: shooting
   Definitions
      At line 336 in file gameboard.s
   Uses
      None
Comment: shooting unused
skip_move 00000408

Symbol: skip_move
   Definitions
      At line 301 in file gameboard.s
   Uses
      At line 286 in file gameboard.s
Comment: skip_move used once
stoploop 000004A0

Symbol: stoploop
   Definitions
      At line 370 in file gameboard.s
   Uses
      At line 374 in file gameboard.s
Comment: stoploop used once
testloop 00000218

Symbol: testloop
   Definitions
      At line 101 in file gameboard.s
   Uses
      At line 104 in file gameboard.s
Comment: testloop used once
timer0_cycle_count 000001CA

Symbol: timer0_cycle_count
   Definitions
      At line 64 in file gameboard.s
   Uses
      At line 268 in file gameboard.s
      At line 428 in file gameboard.s

27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_life 00000000

Symbol: Display_life
   Definitions
      At line 32 in file gameboard.s
   Uses
      At line 80 in file gameboard.s
      At line 298 in file gameboard.s
      At line 310 in file gameboard.s

Display_score 00000000

Symbol: Display_score
   Definitions
      At line 34 in file gameboard.s
   Uses
      At line 243 in file gameboard.s
Comment: Display_score used once
MOTHERLEFT 00000000

Symbol: MOTHERLEFT
   Definitions
      At line 37 in file gameboard.s
   Uses
      At line 212 in file gameboard.s
Comment: MOTHERLEFT used once
MOTHERRIGHT 00000000

Symbol: MOTHERRIGHT
   Definitions
      At line 38 in file gameboard.s
   Uses
      At line 214 in file gameboard.s
Comment: MOTHERRIGHT used once
RPG_GREEN 00000000

Symbol: RPG_GREEN
   Definitions
      At line 31 in file gameboard.s
   Uses
      None
Comment: RPG_GREEN unused
RPG_PURPLE 00000000

Symbol: RPG_PURPLE
   Definitions
      At line 29 in file gameboard.s
   Uses
      At line 314 in file gameboard.s
Comment: RPG_PURPLE used once
RPG_RED 00000000

Symbol: RPG_RED
   Definitions
      At line 30 in file gameboard.s
   Uses
      None
Comment: RPG_RED unused
RPG_WHITE 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: RPG_WHITE
   Definitions
      At line 28 in file gameboard.s
   Uses
      At line 84 in file gameboard.s
Comment: RPG_WHITE used once
atoi 00000000

Symbol: atoi
   Definitions
      At line 35 in file gameboard.s
   Uses
      None
Comment: atoi unused
bullet_up 00000000

Symbol: bullet_up
   Definitions
      At line 14 in file gameboard.s
   Uses
      At line 277 in file gameboard.s
Comment: bullet_up used once
check_level_clear 00000000

Symbol: check_level_clear
   Definitions
      At line 20 in file gameboard.s
   Uses
      At line 247 in file gameboard.s
Comment: check_level_clear used once
en_move_down 00000000

Symbol: en_move_down
   Definitions
      At line 11 in file gameboard.s
   Uses
      None
Comment: en_move_down unused
en_move_left 00000000

Symbol: en_move_left
   Definitions
      At line 10 in file gameboard.s
   Uses
      None
Comment: en_move_left unused
en_move_right 00000000

Symbol: en_move_right
   Definitions
      At line 9 in file gameboard.s
   Uses
      None
Comment: en_move_right unused
en_shot 00000000

Symbol: en_shot
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 27 in file gameboard.s
   Uses
      At line 278 in file gameboard.s
Comment: en_shot used once
enemy_move 00000000

Symbol: enemy_move
   Definitions
      At line 15 in file gameboard.s
   Uses
      At line 290 in file gameboard.s
Comment: enemy_move used once
game_feature 00000000

Symbol: game_feature
   Definitions
      At line 18 in file gameboard.s
   Uses
      At line 90 in file gameboard.s
Comment: game_feature used once
game_instruction 00000000

Symbol: game_instruction
   Definitions
      At line 17 in file gameboard.s
   Uses
      At line 88 in file gameboard.s
Comment: game_instruction used once
itoa 00000000

Symbol: itoa
   Definitions
      At line 36 in file gameboard.s
   Uses
      None
Comment: itoa unused
level 00000000

Symbol: level
   Definitions
      At line 16 in file gameboard.s
   Uses
      At line 260 in file gameboard.s
Comment: level used once
lives 00000000

Symbol: lives
   Definitions
      At line 33 in file gameboard.s
   Uses
      At line 296 in file gameboard.s
      At line 308 in file gameboard.s
      At line 414 in file gameboard.s

mothermoving 00000000

Symbol: mothermoving
   Definitions
      At line 39 in file gameboard.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

   Uses
      At line 209 in file gameboard.s
Comment: mothermoving used once
move_left 00000000

Symbol: move_left
   Definitions
      At line 8 in file gameboard.s
   Uses
      At line 346 in file gameboard.s
Comment: move_left used once
move_right 00000000

Symbol: move_right
   Definitions
      At line 7 in file gameboard.s
   Uses
      At line 344 in file gameboard.s
Comment: move_right used once
output_character 00000000

Symbol: output_character
   Definitions
      At line 3 in file gameboard.s
   Uses
      None
Comment: output_character unused
output_string 00000000

Symbol: output_string
   Definitions
      At line 5 in file gameboard.s
   Uses
      At line 89 in file gameboard.s
      At line 91 in file gameboard.s
      At line 93 in file gameboard.s
      At line 252 in file gameboard.s
      At line 256 in file gameboard.s
      At line 259 in file gameboard.s
      At line 261 in file gameboard.s
      At line 312 in file gameboard.s
      At line 315 in file gameboard.s

player_setup 00000000

Symbol: player_setup
   Definitions
      At line 12 in file gameboard.s
   Uses
      At line 97 in file gameboard.s
Comment: player_setup used once
press_s_to_start 00000000

Symbol: press_s_to_start
   Definitions
      At line 19 in file gameboard.s
   Uses
      At line 92 in file gameboard.s
Comment: press_s_to_start used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

print_scores 00000000

Symbol: print_scores
   Definitions
      At line 26 in file gameboard.s
   Uses
      At line 279 in file gameboard.s
Comment: print_scores used once
read_character 00000000

Symbol: read_character
   Definitions
      At line 2 in file gameboard.s
   Uses
      At line 94 in file gameboard.s
      At line 320 in file gameboard.s
      At line 333 in file gameboard.s
      At line 371 in file gameboard.s

read_string 00000000

Symbol: read_string
   Definitions
      At line 4 in file gameboard.s
   Uses
      None
Comment: read_string unused
rng 00000000

Symbol: rng
   Definitions
      At line 25 in file gameboard.s
   Uses
      None
Comment: rng unused
shoot 00000000

Symbol: shoot
   Definitions
      At line 13 in file gameboard.s
   Uses
      At line 338 in file gameboard.s
Comment: shoot used once
spawn_player 00000000

Symbol: spawn_player
   Definitions
      At line 6 in file gameboard.s
   Uses
      At line 257 in file gameboard.s
Comment: spawn_player used once
34 symbols
395 symbols in table
